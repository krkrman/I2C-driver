
drivers V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000aee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000aee  00000b82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  00800064  00800064  00000b86  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b86  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a0  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002da6  00000000  00000000  00000f94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011d2  00000000  00000000  00003d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a25  00000000  00000000  00004f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ad0  00000000  00000000  00006934  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a85  00000000  00000000  00007404  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002613  00000000  00000000  00008e89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f0  00000000  00000000  0000b49c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__vector_1>
   8:	0c 94 09 03 	jmp	0x612	; 0x612 <__vector_2>
   c:	0c 94 32 03 	jmp	0x664	; 0x664 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__vector_7>
  20:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__vector_8>
  24:	0c 94 a3 04 	jmp	0x946	; 0x946 <__vector_9>
  28:	0c 94 03 04 	jmp	0x806	; 0x806 <__vector_10>
  2c:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__vector_11>
  30:	0c 94 ab 03 	jmp	0x756	; 0x756 <__vector_12>
  34:	0c 94 d7 04 	jmp	0x9ae	; 0x9ae <__vector_13>
  38:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__vector_14>
  3c:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__vector_15>
  40:	0c 94 46 01 	jmp	0x28c	; 0x28c <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ee       	ldi	r30, 0xEE	; 238
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 38       	cpi	r26, 0x8A	; 138
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1f 01 	call	0x23e	; 0x23e <main>
  8a:	0c 94 75 05 	jmp	0xaea	; 0xaea <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_voidSendCommand>:
		
	#endif
	
}
void LCD_voidSendCommand(u8 Copy_u8Command)
{	
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
	//send command
	DIO_voidSetPinValue(LCD_RS,LOW);
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	63 e0       	ldi	r22, 0x03	; 3
  9a:	85 e0       	ldi	r24, 0x05	; 5
  9c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_RW,LOW);
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	63 e0       	ldi	r22, 0x03	; 3
  a4:	86 e0       	ldi	r24, 0x06	; 6
  a6:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <DIO_voidSetPinValue>
		_delay_ms(2);
		DIO_voidSetPinValue(LCD_E,LOW);
		_delay_ms(2);
		
	#else
		DIO_voidSetPinValue(LCD_4_BIT_DATA_D4 , GET_BIT(Copy_u8Command, 4));
  aa:	c4 fb       	bst	r28, 4
  ac:	44 27       	eor	r20, r20
  ae:	40 f9       	bld	r20, 0
  b0:	61 e0       	ldi	r22, 0x01	; 1
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_4_BIT_DATA_D5 , GET_BIT(Copy_u8Command, 5));
  b8:	c5 fb       	bst	r28, 5
  ba:	44 27       	eor	r20, r20
  bc:	40 f9       	bld	r20, 0
  be:	61 e0       	ldi	r22, 0x01	; 1
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_4_BIT_DATA_D6 , GET_BIT(Copy_u8Command, 6));
  c6:	c6 fb       	bst	r28, 6
  c8:	44 27       	eor	r20, r20
  ca:	40 f9       	bld	r20, 0
  cc:	61 e0       	ldi	r22, 0x01	; 1
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_4_BIT_DATA_D7 , GET_BIT(Copy_u8Command, 7));
  d4:	4c 2f       	mov	r20, r28
  d6:	44 1f       	adc	r20, r20
  d8:	44 27       	eor	r20, r20
  da:	44 1f       	adc	r20, r20
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <DIO_voidSetPinValue>
		
		//set clock
		DIO_voidSetPinValue(LCD_E,HIGH);
  e4:	41 e0       	ldi	r20, 0x01	; 1
  e6:	63 e0       	ldi	r22, 0x03	; 3
  e8:	87 e0       	ldi	r24, 0x07	; 7
  ea:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	8f e9       	ldi	r24, 0x9F	; 159
  f0:	9f e0       	ldi	r25, 0x0F	; 15
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <LCD_voidSendCommand+0x60>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <LCD_voidSendCommand+0x66>
  f8:	00 00       	nop
		_delay_ms(2);
		DIO_voidSetPinValue(LCD_E,LOW);
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	63 e0       	ldi	r22, 0x03	; 3
  fe:	87 e0       	ldi	r24, 0x07	; 7
 100:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <DIO_voidSetPinValue>
 104:	8f e9       	ldi	r24, 0x9F	; 159
 106:	9f e0       	ldi	r25, 0x0F	; 15
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_voidSendCommand+0x76>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <LCD_voidSendCommand+0x7c>
 10e:	00 00       	nop
		_delay_ms(2);
		
		if (isInitFinished)
 110:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 114:	88 23       	and	r24, r24
 116:	89 f1       	breq	.+98     	; 0x17a <LCD_voidSendCommand+0xe8>
		{
			DIO_voidSetPinValue(LCD_4_BIT_DATA_D4 , GET_BIT(Copy_u8Command, 0));
 118:	4c 2f       	mov	r20, r28
 11a:	41 70       	andi	r20, 0x01	; 1
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_4_BIT_DATA_D5 , GET_BIT(Copy_u8Command, 1));
 124:	c1 fb       	bst	r28, 1
 126:	44 27       	eor	r20, r20
 128:	40 f9       	bld	r20, 0
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_4_BIT_DATA_D6 , GET_BIT(Copy_u8Command, 2));
 132:	c2 fb       	bst	r28, 2
 134:	44 27       	eor	r20, r20
 136:	40 f9       	bld	r20, 0
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(LCD_4_BIT_DATA_D7 , GET_BIT(Copy_u8Command, 3));
 140:	c3 fb       	bst	r28, 3
 142:	44 27       	eor	r20, r20
 144:	40 f9       	bld	r20, 0
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	83 e0       	ldi	r24, 0x03	; 3
 14a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <DIO_voidSetPinValue>
			
			//set clock
			DIO_voidSetPinValue(LCD_E,HIGH);
 14e:	41 e0       	ldi	r20, 0x01	; 1
 150:	63 e0       	ldi	r22, 0x03	; 3
 152:	87 e0       	ldi	r24, 0x07	; 7
 154:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <DIO_voidSetPinValue>
 158:	8f e9       	ldi	r24, 0x9F	; 159
 15a:	9f e0       	ldi	r25, 0x0F	; 15
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCD_voidSendCommand+0xca>
 160:	00 c0       	rjmp	.+0      	; 0x162 <LCD_voidSendCommand+0xd0>
 162:	00 00       	nop
			_delay_ms(2);
			DIO_voidSetPinValue(LCD_E,LOW);
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	63 e0       	ldi	r22, 0x03	; 3
 168:	87 e0       	ldi	r24, 0x07	; 7
 16a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <DIO_voidSetPinValue>
 16e:	8f e9       	ldi	r24, 0x9F	; 159
 170:	9f e0       	ldi	r25, 0x0F	; 15
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <LCD_voidSendCommand+0xe0>
 176:	00 c0       	rjmp	.+0      	; 0x178 <LCD_voidSendCommand+0xe6>
 178:	00 00       	nop
			_delay_ms(2);
		}
	#endif
	
}
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <LCD_voidInit>:
#include "util/delay.h"

static u8 isInitFinished = 0;
void LCD_voidInit(void)
{
	DIO_voidSetPinDirection(LCD_RS,OUTPUT);
 17e:	41 e0       	ldi	r20, 0x01	; 1
 180:	63 e0       	ldi	r22, 0x03	; 3
 182:	85 e0       	ldi	r24, 0x05	; 5
 184:	0e 94 81 01 	call	0x302	; 0x302 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_RW,OUTPUT);
 188:	41 e0       	ldi	r20, 0x01	; 1
 18a:	63 e0       	ldi	r22, 0x03	; 3
 18c:	86 e0       	ldi	r24, 0x06	; 6
 18e:	0e 94 81 01 	call	0x302	; 0x302 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_E,OUTPUT);
 192:	41 e0       	ldi	r20, 0x01	; 1
 194:	63 e0       	ldi	r22, 0x03	; 3
 196:	87 e0       	ldi	r24, 0x07	; 7
 198:	0e 94 81 01 	call	0x302	; 0x302 <DIO_voidSetPinDirection>
	#if MODE == EIGHT_BIT_MODE
		DIO_voidSetPortDirection(LCD_8_BIT_DATA_PORT , OUTPUT);
		
	#else
		DIO_voidSetPinDirection(LCD_4_BIT_DATA_D4,OUTPUT);
 19c:	41 e0       	ldi	r20, 0x01	; 1
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	0e 94 81 01 	call	0x302	; 0x302 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(LCD_4_BIT_DATA_D5,OUTPUT);
 1a6:	41 e0       	ldi	r20, 0x01	; 1
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	0e 94 81 01 	call	0x302	; 0x302 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(LCD_4_BIT_DATA_D6,OUTPUT);
 1b0:	41 e0       	ldi	r20, 0x01	; 1
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	0e 94 81 01 	call	0x302	; 0x302 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(LCD_4_BIT_DATA_D7,OUTPUT);
 1ba:	41 e0       	ldi	r20, 0x01	; 1
 1bc:	61 e0       	ldi	r22, 0x01	; 1
 1be:	83 e0       	ldi	r24, 0x03	; 3
 1c0:	0e 94 81 01 	call	0x302	; 0x302 <DIO_voidSetPinDirection>
 1c4:	2f ef       	ldi	r18, 0xFF	; 255
 1c6:	89 ef       	ldi	r24, 0xF9	; 249
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	21 50       	subi	r18, 0x01	; 1
 1cc:	80 40       	sbci	r24, 0x00	; 0
 1ce:	90 40       	sbci	r25, 0x00	; 0
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <LCD_voidInit+0x4c>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <LCD_voidInit+0x56>
 1d4:	00 00       	nop

	#endif
	
	_delay_ms(40);
	LCD_voidSendCommand(FUNC_SET);
 1d6:	80 e3       	ldi	r24, 0x30	; 48
 1d8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
 1dc:	8f e9       	ldi	r24, 0x9F	; 159
 1de:	9f e0       	ldi	r25, 0x0F	; 15
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <LCD_voidInit+0x62>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <LCD_voidInit+0x68>
 1e6:	00 00       	nop
	_delay_ms(2);
	LCD_voidSendCommand(FUNC_SET);
 1e8:	80 e3       	ldi	r24, 0x30	; 48
 1ea:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
 1ee:	8f e9       	ldi	r24, 0x9F	; 159
 1f0:	9f e0       	ldi	r25, 0x0F	; 15
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <LCD_voidInit+0x74>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <LCD_voidInit+0x7a>
 1f8:	00 00       	nop
	_delay_ms(2);
	LCD_voidSendCommand(FUNC_SET);
 1fa:	80 e3       	ldi	r24, 0x30	; 48
 1fc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
 200:	8f e9       	ldi	r24, 0x9F	; 159
 202:	9f e0       	ldi	r25, 0x0F	; 15
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <LCD_voidInit+0x86>
 208:	00 c0       	rjmp	.+0      	; 0x20a <LCD_voidInit+0x8c>
 20a:	00 00       	nop
	_delay_ms(2);
	LCD_voidSendCommand(0b00100000);
 20c:	80 e2       	ldi	r24, 0x20	; 32
 20e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
 212:	8f e9       	ldi	r24, 0x9F	; 159
 214:	9f e0       	ldi	r25, 0x0F	; 15
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <LCD_voidInit+0x98>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <LCD_voidInit+0x9e>
 21c:	00 00       	nop
	_delay_ms(2);
	isInitFinished = 1;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
	LCD_voidSendCommand(DISPLAY_ON_CURSOR_OFF);
 224:	8c e0       	ldi	r24, 0x0C	; 12
 226:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
	LCD_voidSendCommand(INCREMENT_CURSORMOVE);
 22a:	86 e0       	ldi	r24, 0x06	; 6
 22c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
	LCD_voidSendCommand(CLR_DISPLAY);
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
	LCD_voidSendCommand(CURSOR_AT_HOME);
 236:	80 e8       	ldi	r24, 0x80	; 128
 238:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidSendCommand>
 23c:	08 95       	ret

0000023e <main>:
#include "LIB/STD_TYPES.h"
#include "MCAL/I2C/I2C_interface.h"

int main(void)
{
	I2C_voidInitMaster(I2C_PRESCALAR_1 , 200000);
 23e:	40 e4       	ldi	r20, 0x40	; 64
 240:	5d e0       	ldi	r21, 0x0D	; 13
 242:	63 e0       	ldi	r22, 0x03	; 3
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	0e 94 65 03 	call	0x6ca	; 0x6ca <I2C_voidInitMaster>
	LCD_voidInit();
 24c:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_voidInit>
	I2C_voidSendStartCondition();
 250:	0e 94 82 03 	call	0x704	; 0x704 <I2C_voidSendStartCondition>
	I2C_voidSendWriteCommand(0x02);
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	0e 94 8c 03 	call	0x718	; 0x718 <I2C_voidSendWriteCommand>
	I2C_voidSendData(5);
 25a:	85 e0       	ldi	r24, 0x05	; 5
 25c:	0e 94 97 03 	call	0x72e	; 0x72e <I2C_voidSendData>
	I2C_voidSendStopCondition();
 260:	0e 94 a1 03 	call	0x742	; 0x742 <I2C_voidSendStopCondition>
 264:	ff cf       	rjmp	.-2      	; 0x264 <main+0x26>

00000266 <ADC_voidStartConversion>:
	//enable ADC interrupt
	SET_BIT(ADCSRA_REG , 3);
	// enable GIE
	SET_BIT(SREG_REG,7);
	ADC_callback = callback;
	ADC_voidStartConversion(channel);
 266:	cf 93       	push	r28
 268:	c8 2f       	mov	r28, r24
 26a:	40 e0       	ldi	r20, 0x00	; 0
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	0e 94 81 01 	call	0x302	; 0x302 <DIO_voidSetPinDirection>
 272:	87 b1       	in	r24, 0x07	; 7
 274:	80 7e       	andi	r24, 0xE0	; 224
 276:	87 b9       	out	0x07, r24	; 7
 278:	87 b1       	in	r24, 0x07	; 7
 27a:	8c 2b       	or	r24, r28
 27c:	87 b9       	out	0x07, r24	; 7
 27e:	86 b1       	in	r24, 0x06	; 6
 280:	80 64       	ori	r24, 0x40	; 64
 282:	86 b9       	out	0x06, r24	; 6
 284:	c0 93 65 00 	sts	0x0065, r28	; 0x800065 <adcChannel>
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <__vector_16>:
};

void ADC_ISR_VECTOR(void)
{
 28c:	1f 92       	push	r1
 28e:	0f 92       	push	r0
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	0f 92       	push	r0
 294:	11 24       	eor	r1, r1
 296:	2f 93       	push	r18
 298:	3f 93       	push	r19
 29a:	4f 93       	push	r20
 29c:	5f 93       	push	r21
 29e:	6f 93       	push	r22
 2a0:	7f 93       	push	r23
 2a2:	8f 93       	push	r24
 2a4:	9f 93       	push	r25
 2a6:	af 93       	push	r26
 2a8:	bf 93       	push	r27
 2aa:	ef 93       	push	r30
 2ac:	ff 93       	push	r31
	if (ADC_callback != 0)
 2ae:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <ADC_callback>
 2b2:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <ADC_callback+0x1>
 2b6:	30 97       	sbiw	r30, 0x00	; 0
 2b8:	71 f0       	breq	.+28     	; 0x2d6 <__vector_16+0x4a>
	{
		ADC_callback(ADCHL_REG);
 2ba:	84 b1       	in	r24, 0x04	; 4
 2bc:	95 b1       	in	r25, 0x05	; 5
 2be:	09 95       	icall
		SET_BIT(ADCSRA_REG , 4);
 2c0:	86 b1       	in	r24, 0x06	; 6
 2c2:	80 61       	ori	r24, 0x10	; 16
 2c4:	86 b9       	out	0x06, r24	; 6
		if (adcMode == ADC_MODE_COUNTINOUS_CONVERSION)
 2c6:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <adcMode>
 2ca:	81 30       	cpi	r24, 0x01	; 1
 2cc:	21 f4       	brne	.+8      	; 0x2d6 <__vector_16+0x4a>
		{
			ADC_voidStartConversion(adcChannel);
 2ce:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <adcChannel>
 2d2:	0e 94 33 01 	call	0x266	; 0x266 <ADC_voidStartConversion>
		}
	}
 2d6:	ff 91       	pop	r31
 2d8:	ef 91       	pop	r30
 2da:	bf 91       	pop	r27
 2dc:	af 91       	pop	r26
 2de:	9f 91       	pop	r25
 2e0:	8f 91       	pop	r24
 2e2:	7f 91       	pop	r23
 2e4:	6f 91       	pop	r22
 2e6:	5f 91       	pop	r21
 2e8:	4f 91       	pop	r20
 2ea:	3f 91       	pop	r19
 2ec:	2f 91       	pop	r18
 2ee:	0f 90       	pop	r0
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	0f 90       	pop	r0
 2f4:	1f 90       	pop	r1
 2f6:	18 95       	reti

000002f8 <CLOCK_u32GetSystemClock>:
	__asm__ volatile("NOP");
}

u32 CLOCK_u32GetSystemClock(void){
	return CLOCK_SYSTEM_FREQUENCY;
 2f8:	60 e0       	ldi	r22, 0x00	; 0
 2fa:	72 e1       	ldi	r23, 0x12	; 18
 2fc:	8a e7       	ldi	r24, 0x7A	; 122
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	08 95       	ret

00000302 <DIO_voidSetPinDirection>:
			DDRD_REG=0x00;
		}
		else if (Copy_u8PortDirection == INPUT_PULL_UP)
		{
			PORTD_REG=0xFF;
			DDRD_REG=0x00;
 302:	61 30       	cpi	r22, 0x01	; 1
 304:	e1 f1       	breq	.+120    	; 0x37e <DIO_voidSetPinDirection+0x7c>
 306:	38 f0       	brcs	.+14     	; 0x316 <DIO_voidSetPinDirection+0x14>
 308:	62 30       	cpi	r22, 0x02	; 2
 30a:	09 f4       	brne	.+2      	; 0x30e <DIO_voidSetPinDirection+0xc>
 30c:	6c c0       	rjmp	.+216    	; 0x3e6 <DIO_voidSetPinDirection+0xe4>
 30e:	63 30       	cpi	r22, 0x03	; 3
 310:	09 f4       	brne	.+2      	; 0x314 <DIO_voidSetPinDirection+0x12>
 312:	9d c0       	rjmp	.+314    	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 314:	08 95       	ret
 316:	41 30       	cpi	r20, 0x01	; 1
 318:	69 f4       	brne	.+26     	; 0x334 <DIO_voidSetPinDirection+0x32>
 31a:	4a b3       	in	r20, 0x1a	; 26
 31c:	21 e0       	ldi	r18, 0x01	; 1
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	b9 01       	movw	r22, r18
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_voidSetPinDirection+0x26>
 324:	66 0f       	add	r22, r22
 326:	77 1f       	adc	r23, r23
 328:	8a 95       	dec	r24
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_voidSetPinDirection+0x22>
 32c:	cb 01       	movw	r24, r22
 32e:	84 2b       	or	r24, r20
 330:	8a bb       	out	0x1a, r24	; 26
 332:	08 95       	ret
 334:	41 11       	cpse	r20, r1
 336:	0e c0       	rjmp	.+28     	; 0x354 <DIO_voidSetPinDirection+0x52>
 338:	4a b3       	in	r20, 0x1a	; 26
 33a:	21 e0       	ldi	r18, 0x01	; 1
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	b9 01       	movw	r22, r18
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_voidSetPinDirection+0x44>
 342:	66 0f       	add	r22, r22
 344:	77 1f       	adc	r23, r23
 346:	8a 95       	dec	r24
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_voidSetPinDirection+0x40>
 34a:	cb 01       	movw	r24, r22
 34c:	80 95       	com	r24
 34e:	84 23       	and	r24, r20
 350:	8a bb       	out	0x1a, r24	; 26
 352:	08 95       	ret
 354:	42 30       	cpi	r20, 0x02	; 2
 356:	09 f0       	breq	.+2      	; 0x35a <DIO_voidSetPinDirection+0x58>
 358:	ac c0       	rjmp	.+344    	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 35a:	4b b3       	in	r20, 0x1b	; 27
 35c:	21 e0       	ldi	r18, 0x01	; 1
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	b9 01       	movw	r22, r18
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_voidSetPinDirection+0x66>
 364:	66 0f       	add	r22, r22
 366:	77 1f       	adc	r23, r23
 368:	8a 95       	dec	r24
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_voidSetPinDirection+0x62>
 36c:	cb 01       	movw	r24, r22
 36e:	94 2f       	mov	r25, r20
 370:	98 2b       	or	r25, r24
 372:	9b bb       	out	0x1b, r25	; 27
 374:	9a b3       	in	r25, 0x1a	; 26
 376:	80 95       	com	r24
 378:	89 23       	and	r24, r25
 37a:	8a bb       	out	0x1a, r24	; 26
 37c:	08 95       	ret
 37e:	41 30       	cpi	r20, 0x01	; 1
 380:	69 f4       	brne	.+26     	; 0x39c <DIO_voidSetPinDirection+0x9a>
 382:	47 b3       	in	r20, 0x17	; 23
 384:	21 e0       	ldi	r18, 0x01	; 1
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	b9 01       	movw	r22, r18
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_voidSetPinDirection+0x8e>
 38c:	66 0f       	add	r22, r22
 38e:	77 1f       	adc	r23, r23
 390:	8a 95       	dec	r24
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_voidSetPinDirection+0x8a>
 394:	cb 01       	movw	r24, r22
 396:	84 2b       	or	r24, r20
 398:	87 bb       	out	0x17, r24	; 23
 39a:	08 95       	ret
 39c:	41 11       	cpse	r20, r1
 39e:	0e c0       	rjmp	.+28     	; 0x3bc <DIO_voidSetPinDirection+0xba>
 3a0:	47 b3       	in	r20, 0x17	; 23
 3a2:	21 e0       	ldi	r18, 0x01	; 1
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	b9 01       	movw	r22, r18
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_voidSetPinDirection+0xac>
 3aa:	66 0f       	add	r22, r22
 3ac:	77 1f       	adc	r23, r23
 3ae:	8a 95       	dec	r24
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_voidSetPinDirection+0xa8>
 3b2:	cb 01       	movw	r24, r22
 3b4:	80 95       	com	r24
 3b6:	84 23       	and	r24, r20
 3b8:	87 bb       	out	0x17, r24	; 23
 3ba:	08 95       	ret
 3bc:	42 30       	cpi	r20, 0x02	; 2
 3be:	09 f0       	breq	.+2      	; 0x3c2 <DIO_voidSetPinDirection+0xc0>
 3c0:	78 c0       	rjmp	.+240    	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 3c2:	48 b3       	in	r20, 0x18	; 24
 3c4:	21 e0       	ldi	r18, 0x01	; 1
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	b9 01       	movw	r22, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_voidSetPinDirection+0xce>
 3cc:	66 0f       	add	r22, r22
 3ce:	77 1f       	adc	r23, r23
 3d0:	8a 95       	dec	r24
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_voidSetPinDirection+0xca>
 3d4:	cb 01       	movw	r24, r22
 3d6:	94 2f       	mov	r25, r20
 3d8:	98 2b       	or	r25, r24
 3da:	98 bb       	out	0x18, r25	; 24
 3dc:	97 b3       	in	r25, 0x17	; 23
 3de:	80 95       	com	r24
 3e0:	89 23       	and	r24, r25
 3e2:	87 bb       	out	0x17, r24	; 23
 3e4:	08 95       	ret
 3e6:	41 30       	cpi	r20, 0x01	; 1
 3e8:	69 f4       	brne	.+26     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3ea:	44 b3       	in	r20, 0x14	; 20
 3ec:	21 e0       	ldi	r18, 0x01	; 1
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	b9 01       	movw	r22, r18
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_voidSetPinDirection+0xf6>
 3f4:	66 0f       	add	r22, r22
 3f6:	77 1f       	adc	r23, r23
 3f8:	8a 95       	dec	r24
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_voidSetPinDirection+0xf2>
 3fc:	cb 01       	movw	r24, r22
 3fe:	84 2b       	or	r24, r20
 400:	84 bb       	out	0x14, r24	; 20
 402:	08 95       	ret
 404:	41 11       	cpse	r20, r1
 406:	0e c0       	rjmp	.+28     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 408:	44 b3       	in	r20, 0x14	; 20
 40a:	21 e0       	ldi	r18, 0x01	; 1
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	b9 01       	movw	r22, r18
 410:	02 c0       	rjmp	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 412:	66 0f       	add	r22, r22
 414:	77 1f       	adc	r23, r23
 416:	8a 95       	dec	r24
 418:	e2 f7       	brpl	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 41a:	cb 01       	movw	r24, r22
 41c:	80 95       	com	r24
 41e:	84 23       	and	r24, r20
 420:	84 bb       	out	0x14, r24	; 20
 422:	08 95       	ret
 424:	42 30       	cpi	r20, 0x02	; 2
 426:	09 f0       	breq	.+2      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 428:	44 c0       	rjmp	.+136    	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 42a:	45 b3       	in	r20, 0x15	; 21
 42c:	21 e0       	ldi	r18, 0x01	; 1
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	b9 01       	movw	r22, r18
 432:	02 c0       	rjmp	.+4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 434:	66 0f       	add	r22, r22
 436:	77 1f       	adc	r23, r23
 438:	8a 95       	dec	r24
 43a:	e2 f7       	brpl	.-8      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 43c:	cb 01       	movw	r24, r22
 43e:	94 2f       	mov	r25, r20
 440:	98 2b       	or	r25, r24
 442:	95 bb       	out	0x15, r25	; 21
 444:	94 b3       	in	r25, 0x14	; 20
 446:	80 95       	com	r24
 448:	89 23       	and	r24, r25
 44a:	84 bb       	out	0x14, r24	; 20
 44c:	08 95       	ret
 44e:	41 30       	cpi	r20, 0x01	; 1
 450:	69 f4       	brne	.+26     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 452:	41 b3       	in	r20, 0x11	; 17
 454:	21 e0       	ldi	r18, 0x01	; 1
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	b9 01       	movw	r22, r18
 45a:	02 c0       	rjmp	.+4      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 45c:	66 0f       	add	r22, r22
 45e:	77 1f       	adc	r23, r23
 460:	8a 95       	dec	r24
 462:	e2 f7       	brpl	.-8      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 464:	cb 01       	movw	r24, r22
 466:	84 2b       	or	r24, r20
 468:	81 bb       	out	0x11, r24	; 17
 46a:	08 95       	ret
 46c:	41 11       	cpse	r20, r1
 46e:	0e c0       	rjmp	.+28     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 470:	41 b3       	in	r20, 0x11	; 17
 472:	21 e0       	ldi	r18, 0x01	; 1
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	b9 01       	movw	r22, r18
 478:	02 c0       	rjmp	.+4      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 47a:	66 0f       	add	r22, r22
 47c:	77 1f       	adc	r23, r23
 47e:	8a 95       	dec	r24
 480:	e2 f7       	brpl	.-8      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 482:	cb 01       	movw	r24, r22
 484:	80 95       	com	r24
 486:	84 23       	and	r24, r20
 488:	81 bb       	out	0x11, r24	; 17
 48a:	08 95       	ret
 48c:	42 30       	cpi	r20, 0x02	; 2
 48e:	89 f4       	brne	.+34     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 490:	42 b3       	in	r20, 0x12	; 18
 492:	21 e0       	ldi	r18, 0x01	; 1
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	b9 01       	movw	r22, r18
 498:	02 c0       	rjmp	.+4      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 49a:	66 0f       	add	r22, r22
 49c:	77 1f       	adc	r23, r23
 49e:	8a 95       	dec	r24
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 4a2:	cb 01       	movw	r24, r22
 4a4:	94 2f       	mov	r25, r20
 4a6:	98 2b       	or	r25, r24
 4a8:	92 bb       	out	0x12, r25	; 18
 4aa:	91 b3       	in	r25, 0x11	; 17
 4ac:	80 95       	com	r24
 4ae:	89 23       	and	r24, r25
 4b0:	81 bb       	out	0x11, r24	; 17
 4b2:	08 95       	ret

000004b4 <DIO_voidSetPinValue>:

}

void DIO_voidSetPinValue (u8 Copy_u8PinNumber, DIO_PORT_t DIO_port, u8 Copy_u8Value)
{
	switch (DIO_port)
 4b4:	61 30       	cpi	r22, 0x01	; 1
 4b6:	39 f1       	breq	.+78     	; 0x506 <DIO_voidSetPinValue+0x52>
 4b8:	38 f0       	brcs	.+14     	; 0x4c8 <DIO_voidSetPinValue+0x14>
 4ba:	62 30       	cpi	r22, 0x02	; 2
 4bc:	09 f4       	brne	.+2      	; 0x4c0 <DIO_voidSetPinValue+0xc>
 4be:	42 c0       	rjmp	.+132    	; 0x544 <DIO_voidSetPinValue+0x90>
 4c0:	63 30       	cpi	r22, 0x03	; 3
 4c2:	09 f4       	brne	.+2      	; 0x4c6 <DIO_voidSetPinValue+0x12>
 4c4:	5e c0       	rjmp	.+188    	; 0x582 <DIO_voidSetPinValue+0xce>
 4c6:	08 95       	ret
	{
		case PORTA:
			if( Copy_u8Value == HIGH)
 4c8:	41 30       	cpi	r20, 0x01	; 1
 4ca:	69 f4       	brne	.+26     	; 0x4e6 <DIO_voidSetPinValue+0x32>
			{
				SET_BIT(PORTA_REG , Copy_u8PinNumber);
 4cc:	4b b3       	in	r20, 0x1b	; 27
 4ce:	21 e0       	ldi	r18, 0x01	; 1
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	b9 01       	movw	r22, r18
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <DIO_voidSetPinValue+0x26>
 4d6:	66 0f       	add	r22, r22
 4d8:	77 1f       	adc	r23, r23
 4da:	8a 95       	dec	r24
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <DIO_voidSetPinValue+0x22>
 4de:	cb 01       	movw	r24, r22
 4e0:	84 2b       	or	r24, r20
 4e2:	8b bb       	out	0x1b, r24	; 27
 4e4:	08 95       	ret
			}
			else if ( Copy_u8Value ==LOW)
 4e6:	41 11       	cpse	r20, r1
 4e8:	6a c0       	rjmp	.+212    	; 0x5be <DIO_voidSetPinValue+0x10a>
			{
				CLR_BIT(PORTA_REG , Copy_u8PinNumber);
 4ea:	4b b3       	in	r20, 0x1b	; 27
 4ec:	21 e0       	ldi	r18, 0x01	; 1
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	b9 01       	movw	r22, r18
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <DIO_voidSetPinValue+0x44>
 4f4:	66 0f       	add	r22, r22
 4f6:	77 1f       	adc	r23, r23
 4f8:	8a 95       	dec	r24
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <DIO_voidSetPinValue+0x40>
 4fc:	cb 01       	movw	r24, r22
 4fe:	80 95       	com	r24
 500:	84 23       	and	r24, r20
 502:	8b bb       	out	0x1b, r24	; 27
 504:	08 95       	ret
			}
			break;

		case PORTB:
			if(Copy_u8Value == HIGH)
 506:	41 30       	cpi	r20, 0x01	; 1
 508:	69 f4       	brne	.+26     	; 0x524 <DIO_voidSetPinValue+0x70>
			{
				SET_BIT(PORTB_REG , Copy_u8PinNumber);
 50a:	48 b3       	in	r20, 0x18	; 24
 50c:	21 e0       	ldi	r18, 0x01	; 1
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	b9 01       	movw	r22, r18
 512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_voidSetPinValue+0x64>
 514:	66 0f       	add	r22, r22
 516:	77 1f       	adc	r23, r23
 518:	8a 95       	dec	r24
 51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_voidSetPinValue+0x60>
 51c:	cb 01       	movw	r24, r22
 51e:	84 2b       	or	r24, r20
 520:	88 bb       	out	0x18, r24	; 24
 522:	08 95       	ret
			}
			else if ( Copy_u8Value ==LOW)
 524:	41 11       	cpse	r20, r1
 526:	4b c0       	rjmp	.+150    	; 0x5be <DIO_voidSetPinValue+0x10a>
			{
				CLR_BIT(PORTB_REG , Copy_u8PinNumber);
 528:	48 b3       	in	r20, 0x18	; 24
 52a:	21 e0       	ldi	r18, 0x01	; 1
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	b9 01       	movw	r22, r18
 530:	02 c0       	rjmp	.+4      	; 0x536 <DIO_voidSetPinValue+0x82>
 532:	66 0f       	add	r22, r22
 534:	77 1f       	adc	r23, r23
 536:	8a 95       	dec	r24
 538:	e2 f7       	brpl	.-8      	; 0x532 <DIO_voidSetPinValue+0x7e>
 53a:	cb 01       	movw	r24, r22
 53c:	80 95       	com	r24
 53e:	84 23       	and	r24, r20
 540:	88 bb       	out	0x18, r24	; 24
 542:	08 95       	ret
			}
			break;

		case PORTC:

			if( Copy_u8Value == HIGH)
 544:	41 30       	cpi	r20, 0x01	; 1
 546:	69 f4       	brne	.+26     	; 0x562 <DIO_voidSetPinValue+0xae>
			{
				SET_BIT(PORTC_REG , Copy_u8PinNumber);
 548:	45 b3       	in	r20, 0x15	; 21
 54a:	21 e0       	ldi	r18, 0x01	; 1
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	b9 01       	movw	r22, r18
 550:	02 c0       	rjmp	.+4      	; 0x556 <DIO_voidSetPinValue+0xa2>
 552:	66 0f       	add	r22, r22
 554:	77 1f       	adc	r23, r23
 556:	8a 95       	dec	r24
 558:	e2 f7       	brpl	.-8      	; 0x552 <DIO_voidSetPinValue+0x9e>
 55a:	cb 01       	movw	r24, r22
 55c:	84 2b       	or	r24, r20
 55e:	85 bb       	out	0x15, r24	; 21
 560:	08 95       	ret
			}
			else if ( Copy_u8Value ==LOW)
 562:	41 11       	cpse	r20, r1
 564:	2c c0       	rjmp	.+88     	; 0x5be <DIO_voidSetPinValue+0x10a>
			{
				CLR_BIT(PORTC_REG , Copy_u8PinNumber);
 566:	45 b3       	in	r20, 0x15	; 21
 568:	21 e0       	ldi	r18, 0x01	; 1
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	b9 01       	movw	r22, r18
 56e:	02 c0       	rjmp	.+4      	; 0x574 <DIO_voidSetPinValue+0xc0>
 570:	66 0f       	add	r22, r22
 572:	77 1f       	adc	r23, r23
 574:	8a 95       	dec	r24
 576:	e2 f7       	brpl	.-8      	; 0x570 <DIO_voidSetPinValue+0xbc>
 578:	cb 01       	movw	r24, r22
 57a:	80 95       	com	r24
 57c:	84 23       	and	r24, r20
 57e:	85 bb       	out	0x15, r24	; 21
 580:	08 95       	ret
			}
			break;

		case PORTD:

			if( Copy_u8Value == HIGH)
 582:	41 30       	cpi	r20, 0x01	; 1
 584:	69 f4       	brne	.+26     	; 0x5a0 <DIO_voidSetPinValue+0xec>
			{
				SET_BIT(PORTD_REG , Copy_u8PinNumber);
 586:	42 b3       	in	r20, 0x12	; 18
 588:	21 e0       	ldi	r18, 0x01	; 1
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	b9 01       	movw	r22, r18
 58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_voidSetPinValue+0xe0>
 590:	66 0f       	add	r22, r22
 592:	77 1f       	adc	r23, r23
 594:	8a 95       	dec	r24
 596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_voidSetPinValue+0xdc>
 598:	cb 01       	movw	r24, r22
 59a:	84 2b       	or	r24, r20
 59c:	82 bb       	out	0x12, r24	; 18
 59e:	08 95       	ret
			}
			else if ( Copy_u8Value ==LOW)
 5a0:	41 11       	cpse	r20, r1
 5a2:	0d c0       	rjmp	.+26     	; 0x5be <DIO_voidSetPinValue+0x10a>
			{
				CLR_BIT(PORTD_REG , Copy_u8PinNumber);
 5a4:	42 b3       	in	r20, 0x12	; 18
 5a6:	21 e0       	ldi	r18, 0x01	; 1
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	b9 01       	movw	r22, r18
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <DIO_voidSetPinValue+0xfe>
 5ae:	66 0f       	add	r22, r22
 5b0:	77 1f       	adc	r23, r23
 5b2:	8a 95       	dec	r24
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <DIO_voidSetPinValue+0xfa>
 5b6:	cb 01       	movw	r24, r22
 5b8:	80 95       	com	r24
 5ba:	84 23       	and	r24, r20
 5bc:	82 bb       	out	0x12, r24	; 18
 5be:	08 95       	ret

000005c0 <__vector_1>:
	if(interruptPin > INT2)
	return;
	EXTI_voidCallBacks[interruptPin] = CallBack;
}

void EXTI_VECTOR_ISR_EXTI0(void){
 5c0:	1f 92       	push	r1
 5c2:	0f 92       	push	r0
 5c4:	0f b6       	in	r0, 0x3f	; 63
 5c6:	0f 92       	push	r0
 5c8:	11 24       	eor	r1, r1
 5ca:	2f 93       	push	r18
 5cc:	3f 93       	push	r19
 5ce:	4f 93       	push	r20
 5d0:	5f 93       	push	r21
 5d2:	6f 93       	push	r22
 5d4:	7f 93       	push	r23
 5d6:	8f 93       	push	r24
 5d8:	9f 93       	push	r25
 5da:	af 93       	push	r26
 5dc:	bf 93       	push	r27
 5de:	ef 93       	push	r30
 5e0:	ff 93       	push	r31
	
	if(EXTI_voidCallBacks[0] != 0){
 5e2:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <EXTI_voidCallBacks>
 5e6:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <EXTI_voidCallBacks+0x1>
 5ea:	30 97       	sbiw	r30, 0x00	; 0
 5ec:	09 f0       	breq	.+2      	; 0x5f0 <__vector_1+0x30>
		EXTI_voidCallBacks[0]();
 5ee:	09 95       	icall
	}
}
 5f0:	ff 91       	pop	r31
 5f2:	ef 91       	pop	r30
 5f4:	bf 91       	pop	r27
 5f6:	af 91       	pop	r26
 5f8:	9f 91       	pop	r25
 5fa:	8f 91       	pop	r24
 5fc:	7f 91       	pop	r23
 5fe:	6f 91       	pop	r22
 600:	5f 91       	pop	r21
 602:	4f 91       	pop	r20
 604:	3f 91       	pop	r19
 606:	2f 91       	pop	r18
 608:	0f 90       	pop	r0
 60a:	0f be       	out	0x3f, r0	; 63
 60c:	0f 90       	pop	r0
 60e:	1f 90       	pop	r1
 610:	18 95       	reti

00000612 <__vector_2>:

void EXTI_VECTOR_ISR_EXTI1(void){
 612:	1f 92       	push	r1
 614:	0f 92       	push	r0
 616:	0f b6       	in	r0, 0x3f	; 63
 618:	0f 92       	push	r0
 61a:	11 24       	eor	r1, r1
 61c:	2f 93       	push	r18
 61e:	3f 93       	push	r19
 620:	4f 93       	push	r20
 622:	5f 93       	push	r21
 624:	6f 93       	push	r22
 626:	7f 93       	push	r23
 628:	8f 93       	push	r24
 62a:	9f 93       	push	r25
 62c:	af 93       	push	r26
 62e:	bf 93       	push	r27
 630:	ef 93       	push	r30
 632:	ff 93       	push	r31
	
	if(EXTI_voidCallBacks[1] != 0){
 634:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <EXTI_voidCallBacks+0x2>
 638:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <EXTI_voidCallBacks+0x3>
 63c:	30 97       	sbiw	r30, 0x00	; 0
 63e:	09 f0       	breq	.+2      	; 0x642 <__vector_2+0x30>
		EXTI_voidCallBacks[1]();
 640:	09 95       	icall
	}
}
 642:	ff 91       	pop	r31
 644:	ef 91       	pop	r30
 646:	bf 91       	pop	r27
 648:	af 91       	pop	r26
 64a:	9f 91       	pop	r25
 64c:	8f 91       	pop	r24
 64e:	7f 91       	pop	r23
 650:	6f 91       	pop	r22
 652:	5f 91       	pop	r21
 654:	4f 91       	pop	r20
 656:	3f 91       	pop	r19
 658:	2f 91       	pop	r18
 65a:	0f 90       	pop	r0
 65c:	0f be       	out	0x3f, r0	; 63
 65e:	0f 90       	pop	r0
 660:	1f 90       	pop	r1
 662:	18 95       	reti

00000664 <__vector_3>:

void EXTI_VECTOR_ISR_EXTI2(void){
 664:	1f 92       	push	r1
 666:	0f 92       	push	r0
 668:	0f b6       	in	r0, 0x3f	; 63
 66a:	0f 92       	push	r0
 66c:	11 24       	eor	r1, r1
 66e:	2f 93       	push	r18
 670:	3f 93       	push	r19
 672:	4f 93       	push	r20
 674:	5f 93       	push	r21
 676:	6f 93       	push	r22
 678:	7f 93       	push	r23
 67a:	8f 93       	push	r24
 67c:	9f 93       	push	r25
 67e:	af 93       	push	r26
 680:	bf 93       	push	r27
 682:	ef 93       	push	r30
 684:	ff 93       	push	r31
	if(EXTI_voidCallBacks[2] != 0){
 686:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <EXTI_voidCallBacks+0x4>
 68a:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <EXTI_voidCallBacks+0x5>
 68e:	30 97       	sbiw	r30, 0x00	; 0
 690:	09 f0       	breq	.+2      	; 0x694 <__vector_3+0x30>
		EXTI_voidCallBacks[2]();
 692:	09 95       	icall
	}
 694:	ff 91       	pop	r31
 696:	ef 91       	pop	r30
 698:	bf 91       	pop	r27
 69a:	af 91       	pop	r26
 69c:	9f 91       	pop	r25
 69e:	8f 91       	pop	r24
 6a0:	7f 91       	pop	r23
 6a2:	6f 91       	pop	r22
 6a4:	5f 91       	pop	r21
 6a6:	4f 91       	pop	r20
 6a8:	3f 91       	pop	r19
 6aa:	2f 91       	pop	r18
 6ac:	0f 90       	pop	r0
 6ae:	0f be       	out	0x3f, r0	; 63
 6b0:	0f 90       	pop	r0
 6b2:	1f 90       	pop	r1
 6b4:	18 95       	reti

000006b6 <commonOperantion>:
 {
	 commonOperantion();
	 u8 status = (TWSR_REG & 0b11111000);
	 while (status!= DATA_RECIEVED && status != NOT_ACK_DATA_RECIEVED);
	 return TWDR_REG;
 }
 6b6:	86 b7       	in	r24, 0x36	; 54
 6b8:	80 68       	ori	r24, 0x80	; 128
 6ba:	86 bf       	out	0x36, r24	; 54
 6bc:	86 b7       	in	r24, 0x36	; 54
 6be:	84 60       	ori	r24, 0x04	; 4
 6c0:	86 bf       	out	0x36, r24	; 54
 6c2:	06 b6       	in	r0, 0x36	; 54
 6c4:	07 fe       	sbrs	r0, 7
 6c6:	fd cf       	rjmp	.-6      	; 0x6c2 <commonOperantion+0xc>
 6c8:	08 95       	ret

000006ca <I2C_voidInitMaster>:
 6ca:	cf 93       	push	r28
 6cc:	c8 2f       	mov	r28, r24
 6ce:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <CLOCK_u32GetSystemClock>
 6d2:	ec 2f       	mov	r30, r28
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	e0 5a       	subi	r30, 0xA0	; 160
 6d8:	ff 4f       	sbci	r31, 0xFF	; 255
 6da:	20 81       	ld	r18, Z
 6dc:	30 e0       	ldi	r19, 0x00	; 0
 6de:	22 0f       	add	r18, r18
 6e0:	33 1f       	adc	r19, r19
 6e2:	03 2e       	mov	r0, r19
 6e4:	00 0c       	add	r0, r0
 6e6:	44 0b       	sbc	r20, r20
 6e8:	55 0b       	sbc	r21, r21
 6ea:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__udivmodsi4>
 6ee:	20 51       	subi	r18, 0x10	; 16
 6f0:	20 b9       	out	0x00, r18	; 0
 6f2:	c1 b9       	out	0x01, r28	; 1
 6f4:	86 b7       	in	r24, 0x36	; 54
 6f6:	80 64       	ori	r24, 0x40	; 64
 6f8:	86 bf       	out	0x36, r24	; 54
 6fa:	86 b7       	in	r24, 0x36	; 54
 6fc:	84 60       	ori	r24, 0x04	; 4
 6fe:	86 bf       	out	0x36, r24	; 54
 700:	cf 91       	pop	r28
 702:	08 95       	ret

00000704 <I2C_voidSendStartCondition>:
 704:	86 b7       	in	r24, 0x36	; 54
 706:	80 62       	ori	r24, 0x20	; 32
 708:	86 bf       	out	0x36, r24	; 54
 70a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <commonOperantion>
 70e:	81 b1       	in	r24, 0x01	; 1
 710:	88 7f       	andi	r24, 0xF8	; 248
 712:	88 30       	cpi	r24, 0x08	; 8
 714:	f1 f7       	brne	.-4      	; 0x712 <I2C_voidSendStartCondition+0xe>
 716:	08 95       	ret

00000718 <I2C_voidSendWriteCommand>:
 718:	88 0f       	add	r24, r24
 71a:	83 b9       	out	0x03, r24	; 3
 71c:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <commonOperantion>
 720:	81 b1       	in	r24, 0x01	; 1
 722:	88 7f       	andi	r24, 0xF8	; 248
 724:	80 32       	cpi	r24, 0x20	; 32
 726:	11 f0       	breq	.+4      	; 0x72c <I2C_voidSendWriteCommand+0x14>
 728:	88 31       	cpi	r24, 0x18	; 24
 72a:	e1 f7       	brne	.-8      	; 0x724 <I2C_voidSendWriteCommand+0xc>
 72c:	08 95       	ret

0000072e <I2C_voidSendData>:
 72e:	83 b9       	out	0x03, r24	; 3
 730:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <commonOperantion>
 734:	81 b1       	in	r24, 0x01	; 1
 736:	88 7f       	andi	r24, 0xF8	; 248
 738:	88 32       	cpi	r24, 0x28	; 40
 73a:	11 f0       	breq	.+4      	; 0x740 <I2C_voidSendData+0x12>
 73c:	80 33       	cpi	r24, 0x30	; 48
 73e:	e1 f7       	brne	.-8      	; 0x738 <I2C_voidSendData+0xa>
 740:	08 95       	ret

00000742 <I2C_voidSendStopCondition>:
 
void I2C_voidSendStopCondition()
{
	// stop condition
	SET_BIT(TWCR_REG , 4);
 742:	86 b7       	in	r24, 0x36	; 54
 744:	80 61       	ori	r24, 0x10	; 16
 746:	86 bf       	out	0x36, r24	; 54
	
	commonOperantion();
 748:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <commonOperantion>
	u8 status = (TWSR_REG & 0b11111000);
 74c:	81 b1       	in	r24, 0x01	; 1
 74e:	88 7f       	andi	r24, 0xF8	; 248
	while (status != STOP_CONDITION);
 750:	80 3a       	cpi	r24, 0xA0	; 160
 752:	f1 f7       	brne	.-4      	; 0x750 <I2C_voidSendStopCondition+0xe>
}
 754:	08 95       	ret

00000756 <__vector_12>:
	SET_BIT(SREG_REG , 7);
	SPI_callBack = callback;
}

void SPI_ISR(void)
{
 756:	1f 92       	push	r1
 758:	0f 92       	push	r0
 75a:	0f b6       	in	r0, 0x3f	; 63
 75c:	0f 92       	push	r0
 75e:	11 24       	eor	r1, r1
 760:	2f 93       	push	r18
 762:	3f 93       	push	r19
 764:	4f 93       	push	r20
 766:	5f 93       	push	r21
 768:	6f 93       	push	r22
 76a:	7f 93       	push	r23
 76c:	8f 93       	push	r24
 76e:	9f 93       	push	r25
 770:	af 93       	push	r26
 772:	bf 93       	push	r27
 774:	ef 93       	push	r30
 776:	ff 93       	push	r31
	if (SPI_callBack != 0)
 778:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <SPI_callBack>
 77c:	f0 91 70 00 	lds	r31, 0x0070	; 0x800070 <SPI_callBack+0x1>
 780:	30 97       	sbiw	r30, 0x00	; 0
 782:	09 f0       	breq	.+2      	; 0x786 <__vector_12+0x30>
	{
			SPI_callBack();
 784:	09 95       	icall
	}
}
 786:	ff 91       	pop	r31
 788:	ef 91       	pop	r30
 78a:	bf 91       	pop	r27
 78c:	af 91       	pop	r26
 78e:	9f 91       	pop	r25
 790:	8f 91       	pop	r24
 792:	7f 91       	pop	r23
 794:	6f 91       	pop	r22
 796:	5f 91       	pop	r21
 798:	4f 91       	pop	r20
 79a:	3f 91       	pop	r19
 79c:	2f 91       	pop	r18
 79e:	0f 90       	pop	r0
 7a0:	0f be       	out	0x3f, r0	; 63
 7a2:	0f 90       	pop	r0
 7a4:	1f 90       	pop	r1
 7a6:	18 95       	reti

000007a8 <__vector_11>:
	SoftwarePWM_dutyCycle = dutyCycle;
	OCR0_REG = 100;
	isSoftwarePWMMode = 1;
	TIMER0_voidEnableInterrupt(TIMER0_INTERRUPT_COMPARE);
}
void TIMER0_ISR_VECTOR_OVERFLOW(void){
 7a8:	1f 92       	push	r1
 7aa:	0f 92       	push	r0
 7ac:	0f b6       	in	r0, 0x3f	; 63
 7ae:	0f 92       	push	r0
 7b0:	11 24       	eor	r1, r1
 7b2:	2f 93       	push	r18
 7b4:	3f 93       	push	r19
 7b6:	4f 93       	push	r20
 7b8:	5f 93       	push	r21
 7ba:	6f 93       	push	r22
 7bc:	7f 93       	push	r23
 7be:	8f 93       	push	r24
 7c0:	9f 93       	push	r25
 7c2:	af 93       	push	r26
 7c4:	bf 93       	push	r27
 7c6:	ef 93       	push	r30
 7c8:	ff 93       	push	r31
	if(TIMER0_callBacks[0] != 0){
 7ca:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <TIMER0_callBacks>
 7ce:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <TIMER0_callBacks+0x1>
 7d2:	30 97       	sbiw	r30, 0x00	; 0
 7d4:	09 f0       	breq	.+2      	; 0x7d8 <__vector_11+0x30>
		TIMER0_callBacks[0]();
 7d6:	09 95       	icall
	}
	SET_BIT(TIFR_REG,0);
 7d8:	88 b7       	in	r24, 0x38	; 56
 7da:	81 60       	ori	r24, 0x01	; 1
 7dc:	88 bf       	out	0x38, r24	; 56
	TCNT0_REG = storedPreload;
 7de:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <storedPreload>
 7e2:	82 bf       	out	0x32, r24	; 50
}
 7e4:	ff 91       	pop	r31
 7e6:	ef 91       	pop	r30
 7e8:	bf 91       	pop	r27
 7ea:	af 91       	pop	r26
 7ec:	9f 91       	pop	r25
 7ee:	8f 91       	pop	r24
 7f0:	7f 91       	pop	r23
 7f2:	6f 91       	pop	r22
 7f4:	5f 91       	pop	r21
 7f6:	4f 91       	pop	r20
 7f8:	3f 91       	pop	r19
 7fa:	2f 91       	pop	r18
 7fc:	0f 90       	pop	r0
 7fe:	0f be       	out	0x3f, r0	; 63
 800:	0f 90       	pop	r0
 802:	1f 90       	pop	r1
 804:	18 95       	reti

00000806 <__vector_10>:

void TIMER0_ISR_VECTOR_COMPARE(void){
 806:	1f 92       	push	r1
 808:	0f 92       	push	r0
 80a:	0f b6       	in	r0, 0x3f	; 63
 80c:	0f 92       	push	r0
 80e:	11 24       	eor	r1, r1
 810:	2f 93       	push	r18
 812:	3f 93       	push	r19
 814:	4f 93       	push	r20
 816:	5f 93       	push	r21
 818:	6f 93       	push	r22
 81a:	7f 93       	push	r23
 81c:	8f 93       	push	r24
 81e:	9f 93       	push	r25
 820:	af 93       	push	r26
 822:	bf 93       	push	r27
 824:	ef 93       	push	r30
 826:	ff 93       	push	r31
	if (isSoftwarePWMMode)
 828:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <isSoftwarePWMMode>
 82c:	88 23       	and	r24, r24
 82e:	f1 f0       	breq	.+60     	; 0x86c <__stack+0xd>
	{
		SoftwarePWM_counter++;
 830:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <SoftwarePWM_counter>
 834:	8f 5f       	subi	r24, 0xFF	; 255
 836:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <SoftwarePWM_counter>
		if (SoftwarePWM_counter >= SoftwarePWM_dutyCycle )
 83a:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <SoftwarePWM_dutyCycle>
 83e:	89 17       	cp	r24, r25
 840:	38 f0       	brcs	.+14     	; 0x850 <__vector_10+0x4a>
		{
			DIO_voidSetPinValue(SoftwarePWM_PIN , SoftwarePWM_PORT , LOW);
 842:	40 e0       	ldi	r20, 0x00	; 0
 844:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <SoftwarePWM_PORT>
 848:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <SoftwarePWM_PIN>
 84c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <DIO_voidSetPinValue>
		}
		if (SoftwarePWM_counter >= 100)
 850:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <SoftwarePWM_counter>
 854:	84 36       	cpi	r24, 0x64	; 100
 856:	88 f0       	brcs	.+34     	; 0x87a <__stack+0x1b>
		{
			DIO_voidSetPinValue(SoftwarePWM_PIN , SoftwarePWM_PORT , HIGH);
 858:	41 e0       	ldi	r20, 0x01	; 1
 85a:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <SoftwarePWM_PORT>
 85e:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <SoftwarePWM_PIN>
 862:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <DIO_voidSetPinValue>
			SoftwarePWM_counter = 0;
 866:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <SoftwarePWM_counter>
 86a:	07 c0       	rjmp	.+14     	; 0x87a <__stack+0x1b>
		}
	}
	else 
	{
		if(TIMER0_callBacks[1] != 0){
 86c:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <TIMER0_callBacks+0x2>
 870:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <TIMER0_callBacks+0x3>
 874:	30 97       	sbiw	r30, 0x00	; 0
 876:	09 f0       	breq	.+2      	; 0x87a <__stack+0x1b>
			TIMER0_callBacks[1]();
 878:	09 95       	icall
		}
	}
	SET_BIT(TIFR_REG,1);
 87a:	88 b7       	in	r24, 0x38	; 56
 87c:	82 60       	ori	r24, 0x02	; 2
 87e:	88 bf       	out	0x38, r24	; 56
}
 880:	ff 91       	pop	r31
 882:	ef 91       	pop	r30
 884:	bf 91       	pop	r27
 886:	af 91       	pop	r26
 888:	9f 91       	pop	r25
 88a:	8f 91       	pop	r24
 88c:	7f 91       	pop	r23
 88e:	6f 91       	pop	r22
 890:	5f 91       	pop	r21
 892:	4f 91       	pop	r20
 894:	3f 91       	pop	r19
 896:	2f 91       	pop	r18
 898:	0f 90       	pop	r0
 89a:	0f be       	out	0x3f, r0	; 63
 89c:	0f 90       	pop	r0
 89e:	1f 90       	pop	r1
 8a0:	18 95       	reti

000008a2 <__vector_7>:

void MTIM1_voidStartTickMeasure(void);
u32  MTIM1_u32GetElapsedTicks(void);
u16 MTIM1_u16GetDivision(void);

void TIMER1_ISR_VECTOR_COMPAREA(void){
 8a2:	1f 92       	push	r1
 8a4:	0f 92       	push	r0
 8a6:	0f b6       	in	r0, 0x3f	; 63
 8a8:	0f 92       	push	r0
 8aa:	11 24       	eor	r1, r1
 8ac:	2f 93       	push	r18
 8ae:	3f 93       	push	r19
 8b0:	4f 93       	push	r20
 8b2:	5f 93       	push	r21
 8b4:	6f 93       	push	r22
 8b6:	7f 93       	push	r23
 8b8:	8f 93       	push	r24
 8ba:	9f 93       	push	r25
 8bc:	af 93       	push	r26
 8be:	bf 93       	push	r27
 8c0:	ef 93       	push	r30
 8c2:	ff 93       	push	r31
	if(TIMER1_callBacks[2] != 0)
 8c4:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <TIMER1_callBacks+0x4>
 8c8:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <TIMER1_callBacks+0x5>
 8cc:	30 97       	sbiw	r30, 0x00	; 0
 8ce:	09 f0       	breq	.+2      	; 0x8d2 <__vector_7+0x30>
	TIMER1_callBacks[2]();
 8d0:	09 95       	icall
}
 8d2:	ff 91       	pop	r31
 8d4:	ef 91       	pop	r30
 8d6:	bf 91       	pop	r27
 8d8:	af 91       	pop	r26
 8da:	9f 91       	pop	r25
 8dc:	8f 91       	pop	r24
 8de:	7f 91       	pop	r23
 8e0:	6f 91       	pop	r22
 8e2:	5f 91       	pop	r21
 8e4:	4f 91       	pop	r20
 8e6:	3f 91       	pop	r19
 8e8:	2f 91       	pop	r18
 8ea:	0f 90       	pop	r0
 8ec:	0f be       	out	0x3f, r0	; 63
 8ee:	0f 90       	pop	r0
 8f0:	1f 90       	pop	r1
 8f2:	18 95       	reti

000008f4 <__vector_8>:
void TIMER1_ISR_VECTOR_COMPAREB(void){
 8f4:	1f 92       	push	r1
 8f6:	0f 92       	push	r0
 8f8:	0f b6       	in	r0, 0x3f	; 63
 8fa:	0f 92       	push	r0
 8fc:	11 24       	eor	r1, r1
 8fe:	2f 93       	push	r18
 900:	3f 93       	push	r19
 902:	4f 93       	push	r20
 904:	5f 93       	push	r21
 906:	6f 93       	push	r22
 908:	7f 93       	push	r23
 90a:	8f 93       	push	r24
 90c:	9f 93       	push	r25
 90e:	af 93       	push	r26
 910:	bf 93       	push	r27
 912:	ef 93       	push	r30
 914:	ff 93       	push	r31
	if(TIMER1_callBacks[1] != 0)
 916:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <TIMER1_callBacks+0x2>
 91a:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <TIMER1_callBacks+0x3>
 91e:	30 97       	sbiw	r30, 0x00	; 0
 920:	09 f0       	breq	.+2      	; 0x924 <__vector_8+0x30>
	TIMER1_callBacks[1]();
 922:	09 95       	icall
}
 924:	ff 91       	pop	r31
 926:	ef 91       	pop	r30
 928:	bf 91       	pop	r27
 92a:	af 91       	pop	r26
 92c:	9f 91       	pop	r25
 92e:	8f 91       	pop	r24
 930:	7f 91       	pop	r23
 932:	6f 91       	pop	r22
 934:	5f 91       	pop	r21
 936:	4f 91       	pop	r20
 938:	3f 91       	pop	r19
 93a:	2f 91       	pop	r18
 93c:	0f 90       	pop	r0
 93e:	0f be       	out	0x3f, r0	; 63
 940:	0f 90       	pop	r0
 942:	1f 90       	pop	r1
 944:	18 95       	reti

00000946 <__vector_9>:
void TIMER1_ISR_VECTOR_OVERFLOW(void){
 946:	1f 92       	push	r1
 948:	0f 92       	push	r0
 94a:	0f b6       	in	r0, 0x3f	; 63
 94c:	0f 92       	push	r0
 94e:	11 24       	eor	r1, r1
 950:	2f 93       	push	r18
 952:	3f 93       	push	r19
 954:	4f 93       	push	r20
 956:	5f 93       	push	r21
 958:	6f 93       	push	r22
 95a:	7f 93       	push	r23
 95c:	8f 93       	push	r24
 95e:	9f 93       	push	r25
 960:	af 93       	push	r26
 962:	bf 93       	push	r27
 964:	ef 93       	push	r30
 966:	ff 93       	push	r31
	overflowCounter++;
 968:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <overflowCounter>
 96c:	8f 5f       	subi	r24, 0xFF	; 255
 96e:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <overflowCounter>
	if(TIMER1_callBacks[0] != 0)
 972:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <TIMER1_callBacks>
 976:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <TIMER1_callBacks+0x1>
 97a:	30 97       	sbiw	r30, 0x00	; 0
 97c:	09 f0       	breq	.+2      	; 0x980 <__vector_9+0x3a>
		TIMER1_callBacks[0]();
 97e:	09 95       	icall
	TCNT1_REG = TIMER1_storedPreload;
 980:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <TIMER1_storedPreload>
 984:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <TIMER1_storedPreload+0x1>
 988:	9d bd       	out	0x2d, r25	; 45
 98a:	8c bd       	out	0x2c, r24	; 44
}
 98c:	ff 91       	pop	r31
 98e:	ef 91       	pop	r30
 990:	bf 91       	pop	r27
 992:	af 91       	pop	r26
 994:	9f 91       	pop	r25
 996:	8f 91       	pop	r24
 998:	7f 91       	pop	r23
 99a:	6f 91       	pop	r22
 99c:	5f 91       	pop	r21
 99e:	4f 91       	pop	r20
 9a0:	3f 91       	pop	r19
 9a2:	2f 91       	pop	r18
 9a4:	0f 90       	pop	r0
 9a6:	0f be       	out	0x3f, r0	; 63
 9a8:	0f 90       	pop	r0
 9aa:	1f 90       	pop	r1
 9ac:	18 95       	reti

000009ae <__vector_13>:
		i++;
	}
}

void USART_ISR_RECIEVE_COMPLETE(void)
{
 9ae:	1f 92       	push	r1
 9b0:	0f 92       	push	r0
 9b2:	0f b6       	in	r0, 0x3f	; 63
 9b4:	0f 92       	push	r0
 9b6:	11 24       	eor	r1, r1
 9b8:	2f 93       	push	r18
 9ba:	3f 93       	push	r19
 9bc:	4f 93       	push	r20
 9be:	5f 93       	push	r21
 9c0:	6f 93       	push	r22
 9c2:	7f 93       	push	r23
 9c4:	8f 93       	push	r24
 9c6:	9f 93       	push	r25
 9c8:	af 93       	push	r26
 9ca:	bf 93       	push	r27
 9cc:	ef 93       	push	r30
 9ce:	ff 93       	push	r31
	if (*USART_recieveCallBack != 0)
 9d0:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <USART_recieveCallBack>
 9d4:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <USART_recieveCallBack+0x1>
 9d8:	30 97       	sbiw	r30, 0x00	; 0
 9da:	11 f0       	breq	.+4      	; 0x9e0 <__vector_13+0x32>
	{
		USART_recieveCallBack(UDR_REG);
 9dc:	8c b1       	in	r24, 0x0c	; 12
 9de:	09 95       	icall
	}
}
 9e0:	ff 91       	pop	r31
 9e2:	ef 91       	pop	r30
 9e4:	bf 91       	pop	r27
 9e6:	af 91       	pop	r26
 9e8:	9f 91       	pop	r25
 9ea:	8f 91       	pop	r24
 9ec:	7f 91       	pop	r23
 9ee:	6f 91       	pop	r22
 9f0:	5f 91       	pop	r21
 9f2:	4f 91       	pop	r20
 9f4:	3f 91       	pop	r19
 9f6:	2f 91       	pop	r18
 9f8:	0f 90       	pop	r0
 9fa:	0f be       	out	0x3f, r0	; 63
 9fc:	0f 90       	pop	r0
 9fe:	1f 90       	pop	r1
 a00:	18 95       	reti

00000a02 <__vector_15>:

void USART_ISR_TRANSMIT_COMPLETE(void)
{
 a02:	1f 92       	push	r1
 a04:	0f 92       	push	r0
 a06:	0f b6       	in	r0, 0x3f	; 63
 a08:	0f 92       	push	r0
 a0a:	11 24       	eor	r1, r1
 a0c:	2f 93       	push	r18
 a0e:	3f 93       	push	r19
 a10:	4f 93       	push	r20
 a12:	5f 93       	push	r21
 a14:	6f 93       	push	r22
 a16:	7f 93       	push	r23
 a18:	8f 93       	push	r24
 a1a:	9f 93       	push	r25
 a1c:	af 93       	push	r26
 a1e:	bf 93       	push	r27
 a20:	ef 93       	push	r30
 a22:	ff 93       	push	r31
	if (USART_callBacks[1] != 0)
 a24:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <USART_callBacks+0x2>
 a28:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <USART_callBacks+0x3>
 a2c:	30 97       	sbiw	r30, 0x00	; 0
 a2e:	09 f0       	breq	.+2      	; 0xa32 <__vector_15+0x30>
	{
		USART_callBacks[1]();
 a30:	09 95       	icall
	}
}
 a32:	ff 91       	pop	r31
 a34:	ef 91       	pop	r30
 a36:	bf 91       	pop	r27
 a38:	af 91       	pop	r26
 a3a:	9f 91       	pop	r25
 a3c:	8f 91       	pop	r24
 a3e:	7f 91       	pop	r23
 a40:	6f 91       	pop	r22
 a42:	5f 91       	pop	r21
 a44:	4f 91       	pop	r20
 a46:	3f 91       	pop	r19
 a48:	2f 91       	pop	r18
 a4a:	0f 90       	pop	r0
 a4c:	0f be       	out	0x3f, r0	; 63
 a4e:	0f 90       	pop	r0
 a50:	1f 90       	pop	r1
 a52:	18 95       	reti

00000a54 <__vector_14>:
void USART_ISR_REGISTER_EMPTY(void)
{
 a54:	1f 92       	push	r1
 a56:	0f 92       	push	r0
 a58:	0f b6       	in	r0, 0x3f	; 63
 a5a:	0f 92       	push	r0
 a5c:	11 24       	eor	r1, r1
 a5e:	2f 93       	push	r18
 a60:	3f 93       	push	r19
 a62:	4f 93       	push	r20
 a64:	5f 93       	push	r21
 a66:	6f 93       	push	r22
 a68:	7f 93       	push	r23
 a6a:	8f 93       	push	r24
 a6c:	9f 93       	push	r25
 a6e:	af 93       	push	r26
 a70:	bf 93       	push	r27
 a72:	ef 93       	push	r30
 a74:	ff 93       	push	r31
	if (USART_callBacks[0] != 0)
 a76:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <USART_callBacks>
 a7a:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <USART_callBacks+0x1>
 a7e:	30 97       	sbiw	r30, 0x00	; 0
 a80:	09 f0       	breq	.+2      	; 0xa84 <__vector_14+0x30>
	{
		USART_callBacks[0]();
 a82:	09 95       	icall
	}
}
 a84:	ff 91       	pop	r31
 a86:	ef 91       	pop	r30
 a88:	bf 91       	pop	r27
 a8a:	af 91       	pop	r26
 a8c:	9f 91       	pop	r25
 a8e:	8f 91       	pop	r24
 a90:	7f 91       	pop	r23
 a92:	6f 91       	pop	r22
 a94:	5f 91       	pop	r21
 a96:	4f 91       	pop	r20
 a98:	3f 91       	pop	r19
 a9a:	2f 91       	pop	r18
 a9c:	0f 90       	pop	r0
 a9e:	0f be       	out	0x3f, r0	; 63
 aa0:	0f 90       	pop	r0
 aa2:	1f 90       	pop	r1
 aa4:	18 95       	reti

00000aa6 <__udivmodsi4>:
 aa6:	a1 e2       	ldi	r26, 0x21	; 33
 aa8:	1a 2e       	mov	r1, r26
 aaa:	aa 1b       	sub	r26, r26
 aac:	bb 1b       	sub	r27, r27
 aae:	fd 01       	movw	r30, r26
 ab0:	0d c0       	rjmp	.+26     	; 0xacc <__udivmodsi4_ep>

00000ab2 <__udivmodsi4_loop>:
 ab2:	aa 1f       	adc	r26, r26
 ab4:	bb 1f       	adc	r27, r27
 ab6:	ee 1f       	adc	r30, r30
 ab8:	ff 1f       	adc	r31, r31
 aba:	a2 17       	cp	r26, r18
 abc:	b3 07       	cpc	r27, r19
 abe:	e4 07       	cpc	r30, r20
 ac0:	f5 07       	cpc	r31, r21
 ac2:	20 f0       	brcs	.+8      	; 0xacc <__udivmodsi4_ep>
 ac4:	a2 1b       	sub	r26, r18
 ac6:	b3 0b       	sbc	r27, r19
 ac8:	e4 0b       	sbc	r30, r20
 aca:	f5 0b       	sbc	r31, r21

00000acc <__udivmodsi4_ep>:
 acc:	66 1f       	adc	r22, r22
 ace:	77 1f       	adc	r23, r23
 ad0:	88 1f       	adc	r24, r24
 ad2:	99 1f       	adc	r25, r25
 ad4:	1a 94       	dec	r1
 ad6:	69 f7       	brne	.-38     	; 0xab2 <__udivmodsi4_loop>
 ad8:	60 95       	com	r22
 ada:	70 95       	com	r23
 adc:	80 95       	com	r24
 ade:	90 95       	com	r25
 ae0:	9b 01       	movw	r18, r22
 ae2:	ac 01       	movw	r20, r24
 ae4:	bd 01       	movw	r22, r26
 ae6:	cf 01       	movw	r24, r30
 ae8:	08 95       	ret

00000aea <_exit>:
 aea:	f8 94       	cli

00000aec <__stop_program>:
 aec:	ff cf       	rjmp	.-2      	; 0xaec <__stop_program>
